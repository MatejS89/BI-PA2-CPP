#pragma once

#include "CEntity.h"

/**
 * @class CEnemy
 * @brief The class representing an enemy entity, derived from CEntity.
 */
class CEnemy : public CEntity {
public:
    CEnemy();

    ~CEnemy() override;

    /**
     * @brief Creates a shared pointer to a new CEnemy instance.
     * @return A shared pointer to the created CEnemy instance.
     * @note Used in the CGameObjectFactory class
     */
    static std::shared_ptr<CGameObject> Create();

    /**
     * @brief Loads the enemy from a JSON object.
     * @param jsonData The JSON data to load from.
     */
    void Load(const json &jsonData) override;

    /**
     * @brief Manages the movement of the enemy. If a player is within the radius, the
     * enemy moves towards the player, jumps at random time intervals and attacks the player.
     * @return True if enemy is alive, false otherwise.
     */
    bool Update() override;

    /**
     * @brief Saves all enemy data and entity data in a json element.
     * @return Json element with stored data to be processed.
     */
    json Save() const override;

private:
    /**
     * @brief Makes enemy jump once a timer runs out.
     * @note The interval is generated by the GenerateRandomNum function.
     */
    void RandomJump();

    void PerformJump();

    void ResetJump();

    /**
     * @brief Checks the collision of the enemy with the map as well as the player so that
     * the enemy cannot walk through a player.
     */
    void EnemyCheckCollision();

    /**
     * @brief Moves the enemy on the x axis and checks if a collision occurred.
     */
    void UpdateHorizontalMovement();

    /**
     * @brief Moves the enemy on the y axis and checks if a collision occurred.
     */
    void UpdateVerticalMovement();

    /**
     * @brief Checks if a collision occurred on the x axis.
     */
    void HandleHorizontalCollisions();

    /**
     * @brief Checks if a collision occurred on the y axis.
     */
    void HandleVerticalCollisions();

    /**
     * @brief Checks if a player is within the radius,
     * used to manage enemy movement, jumping and attacking.
     * The attack and jump is only performed when their respective timers run out.
     * @return True if player is within the radius, false otherwise.
     */
    bool IsPlayerInRange() const;

    /**
     * @brief Contains logic behind moving towards the player. The position of the player is
     * taken from the position of the camera.
     */
    void MoveTowardsPlayer();

    /**
     * @brief Attacks the player if the timer has run out.
     */
    void PerformAttack();

    /**
     * @brief Generates a random float in range from 100 to 200.
     * @return Randomly generated float.
     */
    float GenerateRandomNum() const;

    int JUMP_FORCE;

    int JUMP_TIME;

    float MOVEMENT_SPEED;

    int RADIUS;

    int ATTACK_DMG;

    int ATTACK_RANGE;

    float ATTACK_DELAY;

    float m_JumpDelay;

    float m_JumpTimer;

    float m_AttackTimer;
};
